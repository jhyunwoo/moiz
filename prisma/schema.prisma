datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  nickname      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Answers       Answers[]
  results       QuizResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id         String       @id @default(cuid())
  title      String
  isOpen     Boolean      @default(false)
  state QuizState @default(ACTIVATE)
  questions  Question[]
  QuizResult QuizResult[]
}

enum QuizState {
  ACTIVATE
  RESULT
}

model QuizResult {
  id     String  @id @default(cuid())
  point  Int     @default(0)
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  quiz   Quiz    @relation(fields: [quizId], references: [id])
  quizId String
}

model Question {
  id       String    @id @default(cuid())
  index    Int @default(autoincrement())
  question String
  image    String?
  state    QuestionState @default(CLOSE)
  answer   String
  Quiz     Quiz?     @relation(fields: [quizId], references: [id])
  quizId   String?
  Answers  Answers[]
}

enum QuestionState {
  CLOSE
  WATING
  OPEN
  ANSWER
}

model Answers {
  id         String   @id @default(cuid())
  userAnswer String
  result     Boolean
  point      Int      @default(0)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}
